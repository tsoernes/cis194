
==================== FINAL INTERFACE ====================
2017-03-06 01:21:43.448032 UTC

interface W5-0.1.0.0-XZdPgBj8ab8AI4eBIwYf2:ExprT 8002
  interface hash: bfe7509b77157a90074fe9eb86b295ba
  ABI hash: 17cdf284fe4ed4fc5ae431540f90b673
  export-list hash: c94a9f3c1df4b962a19d2ef3a03129cb
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ab396f11155bd696ab63895436e6f1df
  sig of: Nothing
  used TH splices: False
  where
exports:
  ExprT.ExprT{ExprT.Add ExprT.Lit ExprT.Mul}
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 318df275d77dcdb18e0006d8d7870c2a
5cc8ca083eff16f17feba1d1bb7a90a5
  $fEqExprT :: GHC.Classes.Eq ExprT.ExprT
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ExprT.ExprT ExprT.$fEqExprT_$c== ExprT.$fEqExprT_$c/= -}
5cc8ca083eff16f17feba1d1bb7a90a5
  $fEqExprT_$c/= :: ExprT.ExprT -> ExprT.ExprT -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: ExprT.ExprT) (b :: ExprT.ExprT) ->
                 case ExprT.$fEqExprT_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
5cc8ca083eff16f17feba1d1bb7a90a5
  $fEqExprT_$c== :: ExprT.ExprT -> ExprT.ExprT -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
5cc8ca083eff16f17feba1d1bb7a90a5
  $fShowExprT :: GHC.Show.Show ExprT.ExprT
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ExprT.ExprT
                  ExprT.$fShowExprT_$cshowsPrec
                  ExprT.$fShowExprT_$cshow
                  ExprT.$fShowExprT_$cshowList -}
5cc8ca083eff16f17feba1d1bb7a90a5
  $fShowExprT1 :: ExprT.ExprT -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: ExprT.ExprT) (w1 :: GHC.Base.String) ->
                 ExprT.$w$cshowsPrec 0# w w1) -}
5cc8ca083eff16f17feba1d1bb7a90a5
  $fShowExprT_$cshow :: ExprT.ExprT -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: ExprT.ExprT) ->
                 ExprT.$fShowExprT_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5cc8ca083eff16f17feba1d1bb7a90a5
  $fShowExprT_$cshowList :: [ExprT.ExprT] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ ExprT.ExprT
                   ExprT.$fShowExprT1) -}
5cc8ca083eff16f17feba1d1bb7a90a5
  $fShowExprT_$cshowsPrec ::
    GHC.Types.Int -> ExprT.ExprT -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: ExprT.ExprT)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 ExprT.$w$cshowsPrec ww1 w1 w2 }) -}
fb3c0372ac53c0a707aab9af9797c8ae
  $tc'Add :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12673336721146698977##
                   2484252293149102832##
                   ExprT.$trModule
                   ExprT.$tc'Add1) -}
adccae3def2a350cd2216acdc1a77bb9
  $tc'Add1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Add"#) -}
b26bcd0f22f27aa07227805fd8a5b14f
  $tc'Lit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14267146547608773008##
                   9167148358934183903##
                   ExprT.$trModule
                   ExprT.$tc'Lit1) -}
11c2b33380492fa0a3d648c2010e5dc6
  $tc'Lit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Lit"#) -}
5463a08f0ab6c465ed30b027f9c80ac7
  $tc'Mul :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8654848911197586594##
                   6860549897383944668##
                   ExprT.$trModule
                   ExprT.$tc'Mul1) -}
27bd63ad7e5758aa6c6015b163a66ca6
  $tc'Mul1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Mul"#) -}
81f3c4d11ef6ee8cf212130eb821592c
  $tcExprT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13424829553674393316##
                   17807987153507484829##
                   ExprT.$trModule
                   ExprT.$trModule1) -}
5b16ad88ae1d20bb0e09ef8fd5923f86
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module ExprT.$trModule2 ExprT.$trModule1) -}
387ac454f7d318089a9bd0d7a2e83019
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ExprT"#) -}
8dcdce16287594b74a5ca75b88376392
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "W5-0.1.0.0-XZdPgBj8ab8AI4eBIwYf2"#) -}
5cc8ca083eff16f17feba1d1bb7a90a5
  $w$cshowsPrec ::
    GHC.Prim.Int# -> ExprT.ExprT -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
5cc8ca083eff16f17feba1d1bb7a90a5
  data ExprT
    = Lit GHC.Integer.Type.Integer
    | Add ExprT.ExprT ExprT.ExprT
    | Mul ExprT.ExprT ExprT.ExprT
instance [safe] GHC.Classes.Eq [ExprT.ExprT] = ExprT.$fEqExprT
instance [safe] GHC.Show.Show [ExprT.ExprT] = ExprT.$fShowExprT
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

